package com.rest;

public class Lesson_55_GET_POST {
    // Вспоминая прошлые лекции, отметим несколько понятий о REST.
    // Вызовы REST API осуществляются в основном с помощью протокола HTTP.
    // REST API не принуждает использовать какой-то определенный язык программирования.
    // Для передачи информации можно использовать любой формат представления данных.

    // Но как конкретно будет передаваться информация? Это зависит от используемого транспортного
    // протокола. Мы будем пользоваться HTTP, а в нем за передачу информации отвечают два
    // основополагающих метода GET и POST, первый позволяет получить какие-либо данные, второй
    // отправить их. Поговорим о них поподробней.

    // GET - этот метод позволяет получить или передать информацию(да, именно так, HTTP-методы
    // не привязаны к определенным действиям, сервер сам определяет, что делать с тем, или
    // иным запросом). Обы метода GET и POST состоят из заголовка и тела запроса, но GET
    // чаще всего не имеет тела запроса, все параметры передаются в заголовке. Пример:
    // Мы ввели в поиске яндекса слово "котики" и нажали "найти", в ответ мы увидим страницу
    // со ссылками на различные ресурсы с котиками, а в адресной строке будет написано вот что -
//    https://yandex.ru/search/?text=котики&lr=162333&clid=2270455&win=516
    // Это URL в котором сразу прописаны параметры запроса, после знака ?. То есть,
    // метод GET передает всю информацию о запросе в самом URL. Это способ
    // запроса информации не является безопасным, так как поисковики могут его индексировать
    // и он навсегда останется где-то в интернете, передавать конфиденциальную информацию, а-ля
    // логин-пароль, таким способом не стоит.

    // POST - аналогично позволяет получить, или передать информацию, но его отличие в том, что
    // информация передается в теле заголовка и увидеть ее можно только специализированными
    // инструментами, так же он позволяет передавать файлы.

    // Немного отступим от темы и вернемся к SpringMVC. Как мы помним в контроллере мы
    // создавали методы и помечали их аннотацией @RequestMapping, куда в скобки передавали
    // URL метода, по которому он будет вызван. Запрос этого метода из view у нас шел
    // с помощью GET, по умолчанию все отрабатывало хорошо, однако мы можем ограничить
    // данную аннотацию определенным методом, выглядит это так:
    // @RequestMapping(path="/showDetails", method=RequestMethod.GET), теперь
    // этот метод мы можем вызвать только GET запросом, в ответ на POST сервер
    // вернет 405 статус. Несколько громоздкое написание. Но есть специальные аннотации,
    // для того, чтобы все это не нужно было писать, перед таргет-методом мы можем
    // поставить аннотацию @GetMapping, или @PostMapping и все. Больше ничего писать не нужно.

    // Теперь необходимо разобраться из чего же состоят HTTP запросы. А состоят они из 4 частей:
    // Request line - это собственно сам запрос, состоит из HTTP метода и url к которому
    // этот метод обращается GET/someURL/targetURL
    // Zero or more Headers - хедеры, они содержат метаданные о запросе.
    // An empty line - разделитель хедера и тела запроса
    // Message body(optional) - тело запроса, для GET не используется, только для POST

    // В ответ на запрос обязательно приходит ответ, они тоже состоят из 4 частей:
    // Status line - содержит код и текст статуса, это обязательная часть, по этим статусам
    // отправитель понимает, дошёл ли запрос, или что-то случилось по дороге. Например,
    // статус 404 говорит нам, что запрашиваемая страница не существует.
    // Zero or more headers - метаданные
    // An empty line - разделитель
    // Message bode(optional) - тело запроса

    // Немного поподробней о типах статусов.
    // 1ХХ - Informational - запрос получен, процесс продолжается.
    // 2ХХ - Success - запрос успешно получен, понят и принят.
    // 3ХХ - Redirection - Для выполнения запроса необходимо предпринять дополнительные действия.
    // 4ХХ - Client error - запрос содержит неверный синтаксис или не может быть выполнен.
    // 5ХХ - Server error - серверу не удалось выполнить корректный запрос
}
